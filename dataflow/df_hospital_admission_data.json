{
	"name": "df_hospital_admission_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_hospital_admission",
						"type": "DatasetReference"
					},
					"name": "sourcehospitaladmissions"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_country",
						"type": "DatasetReference"
					},
					"name": "sourcecountrylookup"
				},
				{
					"dataset": {
						"referenceName": "ds_dimdate_lookup",
						"type": "DatasetReference"
					},
					"name": "dimdatesource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_proccesed_hospital_admsn_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkweekly"
				},
				{
					"dataset": {
						"referenceName": "ds_proccesed_hpstal_admsin_daily",
						"type": "DatasetReference"
					},
					"name": "sinkdaily"
				}
			],
			"transformations": [
				{
					"name": "selectrequiredfields"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "selectrequiredcolumns2"
				},
				{
					"name": "splitdailyfromweekly"
				},
				{
					"name": "aggdimdate"
				},
				{
					"name": "joinwithdate"
				},
				{
					"name": "pivotweekly"
				},
				{
					"name": "pivotdaily"
				},
				{
					"name": "sortweekly"
				},
				{
					"name": "sortdaily"
				},
				{
					"name": "selectweekly"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcehospitaladmissions",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcecountrylookup",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimdatesource",
				"sourcehospitaladmissions select(mapColumn(",
				"          country,",
				"          indicator,",
				"          value,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reported_date' = $$),",
				"          each(match(name=='year_week'),",
				"               'reported_year_week' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrequiredfields",
				"selectrequiredfields, sourcecountrylookup lookup(selectrequiredfields@country == sourcecountrylookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          country = selectrequiredfields@country,",
				"          indicator,",
				"          value,",
				"          source,",
				"          reported_date,",
				"          reported_year_week,",
				"          country = sourcecountrylookup@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrequiredcolumns2",
				"selectrequiredcolumns2 split(indicator == 'Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',",
				"     indicator == 'Daily hospital occupancy' || indicator == 'Daily ICU occupancy',",
				"     disjoint: false) ~> splitdailyfromweekly@(weekly, daily)",
				"dimdatesource aggregate(groupBy(ecdc_year_week = year+'-W'+lpad(week_of_year,2,'0')),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> aggdimdate",
				"splitdailyfromweekly@weekly, aggdimdate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinwithdate",
				"joinwithdate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          week_start_date,",
				"          week_end_date,",
				"          source),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotweekly",
				"splitdailyfromweekly@daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotdaily",
				"pivotweekly sort(desc(reported_year_week, true),",
				"     asc(country, true),",
				"     partitionBy('hash', 1)) ~> sortweekly",
				"pivotdaily sort(desc(reported_date, true),",
				"     asc(country, true)) ~> sortdaily",
				"sortweekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          new_hospital_occupancy_count = {Weekly new hospital admissions per 100k_count},",
				"          new_ICU_occupancy_count = {Weekly new ICU admissions per 100k_count},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectweekly",
				"sortdaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          hospital_occupancy_count = {Daily hospital occupancy_count},",
				"          ICU_occupancy_count = {Daily ICU occupancy_count},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"selectweekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospital_adms_weekly.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkweekly",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['hospital_adms_daily.csv'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkdaily"
			]
		}
	}
}